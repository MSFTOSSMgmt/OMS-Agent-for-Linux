#! /bin/bash

#
# Helper functions for omsagent service control
#
# This script can be "sourced" (if sourcing with the "functions" qualifer),
# which is used by the service control scripts. This allows for deeper control
# of the process at a low level.
#
# Otherwise (this is the normal case), invoke this with one of the following
# options:
#
#    start:    Start the OMS service via the service control manager
#    stop:     Stop the OMS service via the service control manager
#    restart:  Restart the OMS service via the service control manager
#    reload:   Reload agent configuration
#

LOGFILE=/var/opt/microsoft/omsagent/log/omsagent.log
PIDFILE=/var/opt/microsoft/omsagent/run/omsagent.pid
OMSADMIN_CONF=/etc/opt/microsoft/omsagent/conf/omsadmin.conf

verify_privileges()
{
    if [ `id -u` -ne 0 ]; then
        echo "Must have root privileges for this operation" >& 2
        exit 1
    fi
}

is_omsagent_running()
{
    verify_privileges

    # Returns 1 if 'omsagent' is running, 0 otherwise
    [ -f $PIDFILE ] || return 0
    ps -p `cat $PIDFILE` | grep -q omsagent
    STATUS=$?

    # Kill PID file if we're not running any longer
    if [ $STATUS -ne 0 ]; then
        rm -f $PIDFILE
        return 0
    else
        return 1
    fi
}

exit_if_agent_not_onboarded()
{
    if [ ! -f $OMSADMIN_CONF ]; then
        echo "Warning: Agent is not onboarded. omsagent cannot be registered as a service."
        exit 0 
    fi
}

wait_until_omsagent_stops()
{
    # Required parameter: Number of seconds to wait for agent to stop
    if [ -z "$1" -o "$1" -le 0 ]; then
        echo "Function \"wait_until_omsagent_stops\" called with invalid parameter"
        exit 1
    fi

    COUNTER=$(( $1 * 2 )) # Since we sleep 0.5 seconds, compute number of seconds
    while [ $COUNTER -gt 0 ]; do
        is_omsagent_running && return $?
        COUNTER=$(( $COUNTER - 1 ))
        sleep 0.5
    done

    # One final try for accurate return status (just return status from the call)
    is_omsagent_running
}

stop_omsagent_process()
{
    # First try sending a graceful shutdown request.
    # If omsagent doesn't stop, forcefully kill it.
    #
    # TODO: omsagent doesn't currently gracefully shut down, we're investigating this later

    is_omsagent_running && return $?

    # kill -sigterm `cat $PIDFILE`
    # wait_until_omsagent_stops 10 && return $?

    echo -n "(Forced) "
    kill -sigkill `cat $PIDFILE`
    wait_until_omsagent_stops 5
    return $?
}

start_omsagent_process()
{
    is_omsagent_running && /opt/microsoft/omsagent/bin/omsagent -d $PIDFILE --no-supervisor -o $LOGFILE
}

#
# Normal usage functions (used by everything except service control scripts)
#

start_omsagent()
{
    exit_if_agent_not_onboarded
    enable_omsagent_service
    is_omsagent_running
    [ $? -ne 0 ] && return

    # If systemd lives here, then we have a systemd unit file
    if pidof systemd 1> /dev/null 2> /dev/null; then
        /bin/systemctl start omsagent
    else
        if [ -x /usr/sbin/invoke-rc.d ]; then
            /usr/sbin/invoke-rc.d omsagent start
        elif [ -x /sbin/service ]; then
            /sbin/service omsagent start
        elif [ -x /bin/systemctl ]; then
            /bin/systemctl start omsagent
        else
            echo "Unrecognized service controller to start OMS Agent service" 1>&2
            exit 1
        fi
    fi
}

stop_omsagent()
{
    is_omsagent_running
    if [ $? -ne 0 ]; then
        # If systemd lives here, then we have a systemd unit file
        if pidof systemd 1> /dev/null 2> /dev/null; then
            /bin/systemctl stop omsagent
        else
            if [ -x /usr/sbin/invoke-rc.d ]; then
                /usr/sbin/invoke-rc.d omsagent stop
            elif [ -x /sbin/service ]; then
                /sbin/service omsagent stop
            elif [ -x /bin/systemctl ]; then
                /bin/systemctl stop omsagent
            else
                echo "Unrecognized service controller to stop OMS Agent service" 1>&2
                exit 1
            fi
        fi
    fi
}

restart_omsagent()
{
    exit_if_agent_not_onboarded
    
    is_omsagent_running
    if [ $? -eq 0 ]; then
        start_omsagent
        return
    else
        enable_omsagent_service
    fi

    # If systemd lives here, then we have a systemd unit file
    if pidof systemd 1> /dev/null 2> /dev/null; then
        /bin/systemctl restart omsagent
    else
        if [ -x /usr/sbin/invoke-rc.d ]; then
            /usr/sbin/invoke-rc.d omsagent restart
        elif [ -x /sbin/service ]; then
            /sbin/service omsagent restart
        elif [ -x /bin/systemctl ]; then
            /bin/systemctl restart omsagent
        else
            echo "Unrecognized service controller to restart OMS Agent service" 1>&2
            exit 1
        fi
    fi
}


find_systemd_dir()
{
    # Various distributions have different paths for systemd unit files ...
    local UNIT_DIR_LIST="/usr/lib/systemd/system /lib/systemd/system"

    if pidof systemd 1> /dev/null 2> /dev/null; then
        # Be sure systemctl lives where we expect it to
        if [ ! -f /bin/systemctl ]; then
            echo "FATAL: Unable to locate systemctl program" 1>&2
            exit 1
        fi

        # Find systemd unit directory
        for i in ${UNIT_DIR_LIST}; do
            if [ -d $i ]; then
                echo ${i}
                return 0
            fi
        done

        # Didn't find unit directory, that's fatal
        echo "FATAL: Unable to resolve systemd unit directory!" 1>&2
        exit 1
    else
        return 1
    fi
}

enable_omsagent_service()
{
    exit_if_agent_not_onboarded
    if [ ! -f /etc/opt/microsoft/omsagent/conf/.service_registered ] && [ -f $OMSADMIN_CONF ]; then
        echo "Configuring OMS agent service ..."
        if pidof systemd 1> /dev/null 2> /dev/null; then
            # systemd
            local systemd_dir=$(find_systemd_dir)
            cp /etc/opt/microsoft/omsagent/sysconf/omsagent.systemd ${systemd_dir}/omsagent.service
            /bin/systemctl daemon-reload
            /bin/systemctl -q enable omsagent
        else
            cp /etc/opt/microsoft/omsagent/sysconf/omsagent.ulinux /etc/init.d/omsagent

            if [ -x /usr/sbin/update-rc.d ]; then
                update-rc.d omsagent defaults > /dev/null
            elif [ -x /usr/lib/lsb/install_initd ]; then
                /usr/lib/lsb/install_initd /etc/init.d/omsagent
            elif [ -x /sbin/chkconfig ]; then
                chkconfig --add omsagent > /dev/null
            else
                echo "Could not find a service controller to configure the OMS Agent Service."
                exit 1
            fi
        fi
        touch  /etc/opt/microsoft/omsagent/conf/.service_registered
    fi 
}


disable_omsagent_service()
{
    # Stop the server if it's running
    stop_omsagent

    # Registered as a systemd service?
    local systemd_dir=$(find_systemd_dir)
    if [ -f ${systemd_dir}/omsagent.service ]; then
        echo "Unconfiguring OMS agent (systemd) service ..."
        /bin/systemctl -q disable omsagent
        rm -f ${systemd_dir}/omsagent.service
        /bin/systemctl daemon-reload
    elif [ -f /etc/init.d/omsagent ]; then
        echo "Unconfiguring OMS agent service ..."
        if [ -f /usr/sbin/update-rc.d ]; then
            /usr/sbin/update-rc.d -f omsagent remove
        elif [ -x /usr/lib/lsb/remove_initd ]; then
            /usr/lib/lsb/remove_initd /etc/init.d/omsagent
        elif [ -x /sbin/chkconfig ]; then
            chkconfig --del omsagent > /dev/null
        else
            echo "Unrecognized Service Controller to unregister OMS Agent Service."
            exit 1
        fi

        rm /etc/init.d/omsagent
    fi
    rm -f /etc/opt/microsoft/omsagent/conf/.service_registered
}

case "$1" in
    functions)
        ;;

    is-running)
        is_omsagent_running
        exit $?
        ;;

    start)
        start_omsagent
        ;;

    stop)
        stop_omsagent
        ;;

    restart)
        restart_omsagent
        ;;

    reload)
        # TODO: Due to a bug in OMS right now, we can't reload via a signal
        restart_omsagent
        ;;

    find-systemd-dir)
        find_systemd_dir
        ;;

    enable)
        enable_omsagent_service
        ;;

    disable)
        disable_omsagent_service
        ;;

    *)
        echo "Unknown parameter : $1" 1>&2
        exit 1
        ;;
esac
